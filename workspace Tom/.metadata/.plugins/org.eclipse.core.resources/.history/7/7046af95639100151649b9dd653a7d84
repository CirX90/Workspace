/**
 * Praktikum TI-PM2, WS 2015
 * Gruppe: Tom-Henrik Hertel (tom-henrik.hertel@haw-hamburg.de)
 * 		   Lenard Lange 	 (lenard.lange@haw-hamburg.de)
 * Aufgabe: Aufgabenblatt 2, Aufgabe 2.3
 * Verwendete Quellen: Vorlesungsfolien
 */

package aufgabenblatt2;

public class Rennauto extends Thread implements Comparable<Rennauto> {

	Rennen rennen = new Rennen();

	long startZeit = System.currentTimeMillis();

	private double dauer;

	private double aktuellePosition = 0;

	private String name;

	private double geschwindigkeit;

	public String getFahrerName() {
		return name;
	}

	public double getGeschwindigkeit() {
		return geschwindigkeit;
	}

	public double getDauer() {
		return dauer;
	}

	public Rennauto(String name, double geschwindigkeit) {
		this.name = name;
		this.geschwindigkeit = geschwindigkeit;
	}

	@Override
	public void run() {

		while (aktuellePosition <= rennen.getStreckenlaenge() - 1
				&& !isInterrupted()) {

			try {
				Thread.sleep(800 + (int) (Math.random() * 401));
			} catch (InterruptedException e) {
				try {
					Thread.sleep(2000);
					interrupt();
				} catch (InterruptedException e1) {
					e1.printStackTrace();
				}
			}

			// try {
			// Thread.sleep(2000);
			// interrupt();
			// zeit = zeit / 1000;
			// zeit = Math.round(10.0 * zeit) / 10.0;
			// } catch (InterruptedException e1) {
			// e1.printStackTrace();
			// }

			aktuellePosition += getGeschwindigkeit();

			System.err.println(getFahrerName() + ": " + aktuellePosition + "/"
					+ rennen.getStreckenlaenge());

			dauer = System.currentTimeMillis() - startZeit;
			dauer /= 1000;
			dauer = Math.round(dauer * 10.0) / 10.0;

		}

	}

	@Override
	public int compareTo(Rennauto auto) {
		int ergebnis = 0;
		if (getDauer() < auto.getDauer()) {
			ergebnis = -1;
		}
		if (getDauer() == auto.getDauer()) {
			ergebnis = 0;
		}
		if (getDauer() > auto.getDauer()) {
			ergebnis = 1;
		}
		return ergebnis;
	}

}