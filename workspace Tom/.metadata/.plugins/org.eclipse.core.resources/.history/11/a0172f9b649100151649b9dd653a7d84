/**
 * Praktikum TI-PM2, WS 2015
 * Gruppe: Tom-Henrik Hertel (tom-henrik.hertel@haw-hamburg.de)
 * 		   Lenard Lange 	 (lenard.lange@haw-hamburg.de)
 * Aufgabe: Aufgabenblatt 2, Aufgabe 2.3
 * Verwendete Quellen: Vorlesungsfolien
 */

package rennen;

/**
 * Klasse Rennauto
 * 
 * @author Leon, Jannes
 *
 */
public class Rennauto extends Thread implements Comparable<Rennauto> {
  /**
   * private double streckenlaenge
   */
  private double streckenlaenge;
  /**
   * private double schritte
   */
  private double schritte = 0.0;
  /**
   * private double zeit
   */
  private long startZeit = System.currentTimeMillis();
//  private double zeit;
  
  private double aktuellePosition = 0;
  
  Rennen rennen = new Rennen();
  
  private double geschwindigkeit;
  
  private double dauer;
  /**
   * private String name
   */
  private String name;
  
  public double getGeschwindigkeit() {
		return geschwindigkeit;
	}

  /**
   * Konstruktor
   * 
   * @param name
   * @param streckenlaenge
   */
  public Rennauto(String name, double streckenlaenge) {
	this.name = name;
	this.streckenlaenge = streckenlaenge;
  }

  /**
   * Getter
   * 
   * @return
   */
  public double getDauer() {
	return dauer;
  }

  /**
   * Getter
   * 
   * @return
   */
  public String getNames() {
	return name;
  }

  /**
   * Override run Methode
   */
  @Override
  public void run() {
	while (!isInterrupted() && aktuellePosition <= rennen.getStreckenlaenge() - 1) {
	  long geschwindigkeit = (long) (Math.random() * 400 + 800);
	  dauer += geschwindigkeit;
//	  schritte++;
	  aktuellePosition += getGeschwindigkeit();

	  System.err.println(name + ": " + schritte + "/" + streckenlaenge);

	  if (schritte == streckenlaenge) {
		interrupt();
	  }

	  try {
		Thread.sleep(geschwindigkeit);
	  } catch (InterruptedException e) {
		try {
		  Thread.sleep(2000);
		  interrupt();
		  dauer = dauer / 1000;
		  dauer = Math.round(10.0 * dauer) / 10.0;
		} catch (InterruptedException e1) {
		  e1.printStackTrace();
		}
	  }
	}
  }

  /**
   * Override CompareTo Methode und Autos nach der Zeit zu sortieren.
   */
  
  @Override
  public int compareTo(Rennauto auto) {
	int ergebnis = 0;
	if (getDauer() < auto.getDauer()) {
	  ergebnis = -1;
	}
	if (getDauer() == auto.getDauer()) {
	  ergebnis = 0;
	}
	if (getDauer() > auto.getDauer()) {
	  ergebnis = 1;
	}
	return ergebnis;
  }
}