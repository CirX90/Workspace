/**
 * Praktikum Programmiermethodik, SS 2015
 * Gruppe: Jannes Volkens (jannes.volkens@haw-hamburg.de),
 * Leon Schlichting (leon.schlichting@haw-hamburg.de)
 * Aufgabe: Aufgabenblatt 4, Aufgabe 2
 */

package Bahnzuege;

public class Zug {

	/**
	 * Variable anzahl initialisieren und den Wert 0 zuweisen
	 */
	//NKB anzahl soll hier entfallen
	// Über die Reihung kommt man an die anzahl
	//int anzahl = 0;

	/**
	 * Objektvariable lok der Klasse Lokomotive wird initialisiert
	 */
	private final Lokomotive lok;

	/**
	 * Methode getLokomotive gibt den Wert der Lokomotive zurück
	 */
	public Lokomotive getLokomotive() {
		return this.lok;
	}

	/**
	 * Konstruktor
	 * 
	 */
	public Zug(Lokomotive lok) {
		this.lok = lok;
	}

	/**
	 * Methode wagenHinzufuegen fügt neuen Wagen dem Zug hinzu indem er prüft ob
	 * ein ErsterWagen angehängt wurde, wenn ja dann setzt er den neuen Wagen
	 * als ersten Wagen ansonsten wird der neue Wagen ein naechster Wagen Der
	 * Wert von anzahl wird um 1 erhöht pro Methodenaufruf
	 */
	public void wagenHinzufuegen(Wagen neuerWagen) {
		if (lok.getErsterWagen() == null) {
			lok.setErsterWagen(neuerWagen);
		} else {
			Wagen wagen = lok.getErsterWagen();
			while (wagen.getNaechsterWagen() != null) {
				wagen = wagen.getNaechsterWagen();
			}
			wagen.setNaechsterWagen(neuerWagen);
		}
		anzahl++;
	}

	/**
	 * Methode wagenEntfernen entfernt den ersten Wagen, wenn ein ersterWagen
	 * existiert. Sollten noch mehr Wagen existieren wird der darauffolgende
	 * Wagen der neue erste Wagen Der Wert von anzahl wird um 1 verringert
	 */
	public Wagen wagenEntfernen() {
		Wagen ersterWagen = lok.getErsterWagen();
		if (ersterWagen != null) {
			lok.setErsterWagen(lok.getErsterWagen().getNaechsterWagen());
		}
		anzahl--;
		ersterWagen.setNaechsterWagen(null);
		return ersterWagen;
	}

	/**
	 * Methode zugAnhaengen hängt Zug an, indem die Methode prüft ob ein erster
	 * Wagen existiert, wenn ja werden die Wagen vom anzuhängenden Zug als
	 * naechsterWagen an den zu erweiternden Zug angehangen, wenn kein
	 * ersterWagen existiert wird der erste anzuhängende Wagen erster Wagen
	 */
	public void zugAnhaengen(Zug neuerZug) {
		if (lok.getErsterWagen() == null) {
			lok.setErsterWagen(neuerZug.lok.getErsterWagen());
		} else {
			
			//NKB Direkt den ersten Wagen umhaengen und .....
			Wagen neuerWagen = lok.getErsterWagen();
			while (neuerWagen.getNaechsterWagen() != null) {
				neuerWagen = neuerWagen.getNaechsterWagen();
			}
			neuerWagen.setNaechsterWagen(neuerZug.lok.getErsterWagen());
		}
	}

	//NKB Auch hier toString()
	public void info(){
		System.out.println(toString());
	}
	/**
	 * Methode info gibt die Werte von der Lokomotive und die Werte der Wagen
	 * wieder, indem die for schleife jeden Wagen einmal abarbeitet und bei
	 * jedem Durchgang die Wagennummer um 1 erhöht
	 */
	public void inf() {
		System.out.println("_____Der Zug");
		System.out.println(lok.toString());
		int nummer = 1;
		//NKB while-Schleife
		for (Wagen neuerWagen = lok.getErsterWagen(); neuerWagen != null; neuerWagen = neuerWagen
				.getNaechsterWagen(), nummer++) {
			System.out.println("_____Wagen" + nummer);
			System.out.println(neuerWagen.toString());
		}
	}

	/**
	 * Methode getLaenge berechnet die Länge des Zuges, indem die Länge der
	 * Variable laenge den Wert der laenge der Klasse Lokomotive annimmt. Die
	 * for Schleife prüft, ob es einen ersten Wagen gibt, wenn ja, dann wird die
	 * Variable neuerWagen der erste Wagen. Jetzt addiert er die Längen des
	 * ersten Wagens und der Lok zusammen und wenn es weitere Wagen geben
	 * sollte, werden die Längen dieser durch die for Schleife hinzuaddiert. Die
	 * Schleife bricht ab, wenn keine weiteren Wagen mehr über sind Am Ende wird
	 * die Summe der Längen auf der KOnsole ausgegeben und der Wert Länge wird
	 * zurückgegeben.
	 */
	public int getLaenge() {
		int laenge = lok.getLaenge();
		Wagen neuerWagen = lok.getErsterWagen();
		while(neuerWagen != null){
			laenge += neuerWagen.getLaenge();
			neuerWagen = neuerWagen.getNaechsterWagen();
		}
		System.out.println("Länge: " + laenge + "\n");
		return laenge;
	}
	/**
	 * 
	 */
	public int getWagenAnzahl() {
		int 


	}

	//NKB
	// Ohne aktuellen Parameter
	public void getKapazitaet() {
		int passagiere = 0;
		Wagen neuerWagen = lok.getErsterWagen();
		while(neuerWagen != null){
			passagiere += neuerWagen.getPassagiere();
			neuerWagen = neuerWagen.getNaechsterWagen();
		}
		System.out.println("Kapazitaet: " + passagiere + "\n");
	}

}