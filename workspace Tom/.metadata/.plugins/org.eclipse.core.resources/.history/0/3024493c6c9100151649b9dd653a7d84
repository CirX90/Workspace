/**
 * Praktikum TI-PM2, WS 2015
 * Gruppe: Tom-Henrik Hertel (tom-henrik.hertel@haw-hamburg.de)
 * 		   Lenard Lange 	 (lenard.lange@haw-hamburg.de)
 * Aufgabe: Aufgabenblatt 2, Aufgabe 2.3
 * Verwendete Quellen: Vorlesungsfolien
 */

package rennen;

public class Rennauto extends Thread implements Comparable<Rennauto> {

	/**
	 * Startzeit des Programms festhalten.
	 */

	private long startZeit = System.currentTimeMillis();

	/**
	 * Aktuelle Position der Autos.
	 */

	private double aktuellePosition = 0;

	/**
	 * Zugriff auf Variablen und Methoden der Klasse Rennen.
	 */

	Rennen rennen = new Rennen();

	/**
	 * Geschwindigkeit der Rennautos.
	 */

	private double geschwindigkeit;

	/**
	 * Dauer die die Liebenszeit der Threads darstellen soll.
	 */

	private double dauer;

	/**
	 * Name der Autos.
	 */

	private String autoName;

	// Getter Methoden

	public double getAktuellePosition() {
		return aktuellePosition;
	}

	public double getGeschwindigkeit() {
		return geschwindigkeit;
	}

	public double getDauer() {
		return dauer;
	}
	
	public String getAutoNamen() {
		return autoName;
	}

	/**
	 * Konstruktor.
	 * 
	 * @param name
	 * @param streckenlaenge
	 */

	public Rennauto(String name, double geschwindigkeit) {
		this.name = name;
		this.geschwindigkeit = geschwindigkeit;
	}

	/**
	 * Override run Methode. Aktuelle Position der einzelnen Autos wird jede
	 * Runde ermittelt und ausgegeben.
	 */

	@Override
	public void run() {
		while (!isInterrupted()
				&& aktuellePosition <= rennen.getStreckenlaenge() - 1) {

			aktuellePosition += getGeschwindigkeit();

			System.err.println(name + ": " + aktuellePosition + "/"
					+ rennen.getStreckenlaenge());

			dauer = System.currentTimeMillis() - startZeit;
			dauer /= 1000;
			dauer = Math.round(dauer * 10.0) / 10.0;

			try {
				Thread.sleep((int) (Math.random() * 401 + 800));
			} catch (InterruptedException e) {
				try {
					Thread.sleep(1000);
					interrupt();
				} catch (InterruptedException e1) {
					e1.printStackTrace();
				}
			}
		}
	}

	/**
	 * Override CompareTo Methode um Autos nach der Zeit zu sortieren.
	 */

	@Override
	public int compareTo(Rennauto auto) {
		int ergebnis = 0;
		if (getDauer() < auto.getDauer()) {
			ergebnis = -1;
		}
		if (getDauer() == auto.getDauer()) {
			ergebnis = 0;
		}
		if (getDauer() > auto.getDauer()) {
			ergebnis = 1;
		}
		return ergebnis;
	}
}