package aufgabenblatt2;

import java.util.HashMap;
import java.util.Map;
import java.util.function.BinaryOperator;

public class Rechner {

	double zahl1 = 1.0;
	double zahl2 = 2.0;

	private enum Operation {
		ADDITION, SUBTRAKTION, MULTIPLIKATION, DIVISION
	}

//	static Map<Operation, BinaryOperator<Double>> map = new HashMap<Operation, BinaryOperator<Double>>();
	static Map<Operation, DoubleDoubleZuDouble> map = new HashMap<Operation, DoubleDoubleZuDouble>();


	private DoubleDoubleZuDouble addiere = (zahl1, zahl2) -> {
		return zahl1 + zahl2;
	};

	private DoubleDoubleZuDouble subtrahiere = (zahl1, zahl2) -> {
		return zahl1 - zahl2;
	};

	private DoubleDoubleZuDouble multipliziere = (zahl1, zahl2) -> {
		return zahl1 * zahl2;
	};

	private DoubleDoubleZuDouble dividiere = (zahl1, zahl2) -> {
		return zahl1 / zahl2;
	};

	public double berechne(Operation rechenart, double zahl1, double zahl2) {

		if (rechenart == Operation.ADDITION) {
			return map.get(Operation.ADDITION).werteAus(zahl1, zahl2);
		}

		if (rechenart == Operation.SUBTRAKTION) {
			return map.get(Operation.SUBTRAKTION).apply(zahl1, zahl2);
		}

		if (rechenart == Operation.MULTIPLIKATION) {
			return map.get(Operation.MULTIPLIKATION).apply(zahl1, zahl2);
		}

		if (rechenart == Operation.DIVISION) {
			return map.get(Operation.DIVISION).apply(zahl1, zahl2);
		} else {

			return 0.0;
		}

	}

	public static void main(String[] args) {
		Rechner rechner = new Rechner();
//		System.out.println(rechner.berechne(Operation.DIVISION, rechner.zahl1,
//				rechner.zahl2));

		map.put(Operation.ADDITION, (x, y) -> { return x + y; });
		
		
		System.out.println(rechner.berechne(Operation.ADDITION, rechner.zahl1,
				rechner.zahl2));

	}

}
